<?xml version="1.0" encoding="utf-8" ?>

<configuration>
  <!--声明一个名为log4net的自定义配置节-->
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>

  <!--log4net节的具体配置-->
  <log4net>
    <!--所有的logger都继承这个根logger-->
    <root>
      <!--logger的等级，高到低：OFF > FATAL > ERROR > WARN > INFO > DEBUG  > ALL-->
      <!--高于或等于 指定等级 的能被写入-->
      <level value="ALL"/>
    </root>

    <!--logger可以有继承关系。a.b.c和a.b，a.b就是a.b.c的祖先-->
    <logger name="FirstLogger">
      <level value="ALL"/>
      <appender-ref ref="ConsoleAppender" />
      <appender-ref ref="RollingFileAppender" />
    </logger>

    <logger name="SecondLogger">
      <level value="WARN"/>
      <appender-ref ref="RollingFileAppender" />
    </logger>
    
    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender,log4net" >
      <!--Gets or sets the path to the file that logging will be written to.-->
      <param name="File" value="" />
      <param name="AppendToFile" value="true" />
      <param name="Encoding" value="UTF-8" />
      <!--Gets or sets the maximum number of backup files that are kept before the oldest is erased.-->
      <param name="MaxSizeRollBackups" value="30" />
      <!--Gets or sets a value indicating whether to always log to the same file.-->
      <param name="StaticLogFileName" value="false" />
      <!--Gets or sets the rolling style.日期[Date],文件大小[Size],混合[Composite]-->
      <param name="RollingStyle" value="Date" />
      <!--Gets or sets the date pattern to be used for generating file names when rolling over on date.-->
      <!--&quot;是引号，把中间的常量字符引起来，区别yyyyMMdd这些-->
      <param name="DatePattern" value="&quot;Log&quot;/yyyy-MM-dd&quot;.log&quot;"/>
      <!--Gets or sets the maximum size that the output file is allowed to reach before being rolled over to backup files.-->
      <param name="MaximumFileSize" value="500KB" />
      <!--Gets or sets the rolling file count direction.-->
      <!--<param name="CountDirection" value="1"/>-->
      <!--设置输出格式-->
      <layout type="log4net.Layout.PatternLayout,log4net">
        <param name="Header" value="---------------"/>
        <param name="Footer" value="---------------"/>
        <param name="ConversionPattern" value="%nTime:%d{ISO8601}  Thread:%t  LogLevel:%-5p  LoggerName:%c%n%m%n" />
      </layout>
      <!--设置过滤格式-->
      <!--此appender使用的过滤器-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <param name="LevelMin" value="DEBUG" />
        <param name="LevelMax" value="FATAL" />
      </filter>
    </appender>
    
    <appender name="ConsoleAppender"  type="log4net.Appender.ConsoleAppender" >
      <layout type="log4net.Layout.PatternLayout,log4net">
        <param name="ConversionPattern"  value="%nTime:%d{ISO8601}  Thread:%t  LogLevel:%-5p  LoggerName:%c%n%m%n" />
      </layout>
    </appender>
    
  </log4net>
</configuration>

<!--log4net已经实现的输出方式如下。自定义的输出方式需要从log4net.Appender.AppenderSkeleton类继承。-->
<!--
AdoNetAppender 数据库。可以采用SQL和存储过程两种方式。
AnsiColorTerminalAppender 将日志高亮输出到ANSI终端。
AspNetTraceAppender  能用asp.net中Trace的方式查看记录的日志。
BufferingForwardingAppender 在输出到子Appenders之前先缓存日志事件。
ConsoleAppender 将日志输出到应用程序控制台。
EventLogAppender 将日志写到Windows Event Log。
FileAppender 将日志输出到文件。
ForwardingAppender 发送日志事件到子Appenders。
LocalSyslogAppender 将日志写到local syslog service (仅用于UNIX环境下)。
MemoryAppender 将日志存到内存缓冲区。
NetSendAppender 将日志输出到Windows Messenger service.这些日志信息将在用户终端的对话框中显示。
OutputDebugStringAppender 将日志输出到Debuger，如果程序没有Debuger，就输出到系统Debuger。如果系统Debuger也不可用，将忽略消息。
RemoteSyslogAppender 通过UDP网络协议将日志写到Remote syslog service。
RemotingAppender 通过.NET Remoting将日志写到远程接收端。
RollingFileAppender 将日志以回滚文件的形式写到文件中。
SmtpAppender 将日志写到邮件中。
SmtpPickupDirAppender 将消息以文件的方式放入一个目录中，像IIS SMTP agent这样的SMTP代理就可以阅读或发送它们。
TelnetAppender 客户端通过Telnet来接受日志事件。
TraceAppender 将日志写到.NET trace 系统。
UdpAppender 将日志以无连接UDP数据报的形式送到远程宿主或用UdpClient的形式广播。
-->

<!--
过滤器有以下几种：
DenyAllFilter 阻止所有的日志事件被记录
LevelMatchFilter 只有指定等级的日志事件才被记录
LevelRangeFilter 日志等级在指定范围内的事件才被记录
LoggerMatchFilter 与Logger名称匹配，才记录
PropertyFilter 消息匹配指定的属性值时才被记录
StringMathFilter 消息匹配指定的字符串才被记录
-->

<!--
一个Appender对应一个Layout
自定义layout需要从log4net.Layout.LayoutSkeleton类继承
Layout是Appender的输出格式，常见的有：
PatternLayout 最常见的
SimpleLayout 只输出日志级别与消息内容
RawTimeStampLayout 用来格式化时间，在向数据库输出时会用到 样式如“yyyy-MM-dd HH:mm:ss“
ExceptionLayout 输出的时候会包含Message和Trace
IRawLayout
XMLLayout
-->

<!--
日志等级的一般理解：
FATAL（致命错误）：记录系统中出现的能使用系统完全失去功能，服务停止，系统崩溃等使系统无法继续运行下去的错误。例如，数据库无法连接，系统出现死循环。
ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。
WARN（警告）：记录系统中不影响系统继续运行，但不符合系统运行正常条件，有可能引起系统错误的信息。例如，记录内容为空，数据内容不正确等。
INFO（一般信息）：记录系统运行中应该让用户知道的基本信息。例如，服务开始运行，功能已经开户等。
DEBUG （调试信息）：记录系统用于调试的一切信息，内容或者是一些关键数据内容的输出。
-->

<!--
log4net支持的子元素
appender  1~多个
logger   0~多个
renderer   0~多个
root   0~1个
param   0~多个
-->

<!--
PatterLayout格式化字符表
appdomain/a     引发日志事件的应用程序域的友好名称
c/logger    记录日志事件的Logger对象的名字
d/date     发生日志事件的本地时间 %date{dd MMM yyyy HH:mm:ss,fff}、%date{ISO8601/ABSOLUTE/DATE}
exception   异常信息，一般异常在最后
p/level     日志事件等级
m/message    由应用程序提供给日志事件的消息
X/mdc
newline/n    换行
x/ndc
property/P/properties    输出事件的特殊属性.%property将输出所有的属性
timestamp/r    从程序启动到事件发生所经过的毫秒数
thread/t    引发日志事件的线程，如果没有线程名就使用线程号
utcdate    发生日志事件的UTC时间，其他与d/date类似
%     %%输出一个百分号

下面的这些影响性能：
F/file    发生日志请求的源代码文件的名字
u/identity    当前活动用户的名字
l/location    引发日志事件的方法（包括命名空间和类名），以及所在的源文件和行号
L/line    引发日志事件的行号
M/method    发生日志请求的方法名（只有方法名而已）
C/type/class    引发日志请求的类的全名
w/username    当前用户的WindowsIdentity.类似：HostName/Username
-->